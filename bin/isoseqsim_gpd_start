#!/usr/bin/env python
import argparse, sys, os, time
from subprocess import check_call

def main():
    args = do_inputs()
    tempdir = setup_tempdir(args.tempdir)
    udir = os.path.dirname(os.path.realpath(__file__)) + "/../utilities"
    sys.stdout.write("### Start analysis at " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
    sys.stdout.flush()
    
    gpd_file = args.gpd

    sys.stdout.write("## Mode: normal\n")
    sys.stdout.write("# Step1: generate transcriptome fasta file\n")
    sys.stdout.flush()
    cmd1 = udir + "/py_isoseqsim_gpd2fa_normal.py -a " + args.genome + " -g " + gpd_file + " -o " + tempdir + "/normal_transcriptome.fa"
    check_call(cmd1.split())

    sys.stdout.write("# Step2: generate expression matrix based on Negative Binomial distribution\n")
    sys.stdout.flush()
    cmd2 = udir + "/py_isoseqsim_generate_expr_matrix.py -i " + gpd_file + " -n " + args.nbn + " -p " + args.nbp + " -o " + args.transcript
    check_call(cmd2.split())
            
    sys.stdout.write("# Step3: simulate Iso-Seq reads\n")
    sys.stdout.flush()
    cmd3 = udir + "/py_isoseqsim_simulate_reads_normal.py -g " + args.transcript + " -t " + tempdir + "/normal_transcriptome.fa" + " -5 " + args.c5 + " -3 " + args.c3 + " -o " + args.output + " -s " + args.es + " -i " + args.ei + " -d " + args.ed + " -p " + args.cpu
    check_call(cmd3.split())

    sys.stdout.write("### Finish analysis at " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
    sys.stdout.flush()

def setup_tempdir(tempd):
    if not os.path.exists(tempd):
        os.makedirs(tempd.rstrip('/'))
    return tempd.rstrip('/')

def do_inputs():
    parser=argparse.ArgumentParser(description="IsoSeqSim: Iso-Seq reads simulator",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-v','--version',action='version',version='IsoSeqSim (version 0.1)')
    parser.add_argument('-g','--genome',type=str,required=True,help="Input: genome sequence file, FASTA format")
    parser.add_argument('-p','--gpd',type=str,required=True,help="Input: gene annotation file, GPD format")
    parser.add_argument('-o','--output',type=str,required=True,help="Output: simulated reads file, FASTA format. For more details, see README")
    parser.add_argument('-t','--transcript',type=str,required=True,help="Output: annotation file to show the simulated transcripts with read counts, modified GenePred table format. For more details, see README")
    parser.add_argument('--tempdir',type=str,required=True,help="Temporary directory for saving intermediate files. You can delete it after finish running. (e.g., ./temp)")
    parser.add_argument('--nbn',type=str,default='10',help="Average read count per transcript to simulate (i.e., the parameter 'n' of the Negative Binomial distribution)")
    parser.add_argument('--nbp',type=str,default='0.5',help="The parameter 'p' of the Negative Binomial distribution")
    parser.add_argument('--cpu',type=str,default='1',help="Number of thread")
    
    group1 = parser.add_argument_group('Error pattern and transcript completeness options')
    group1.add_argument('--c5',type=str,required=True,help="5'end completeness of transcripts. Tab-spit file: first column is the number of deleted nucleotides in comparison with reference gene annotation; second column is its frequency. Total frequency must be <= 1.0. Can choose from './utilities/5_end_completeness.*.tab' under the IsoSeqSim package")
    group1.add_argument('--c3',type=str,required=True,help="3'end completeness of transcripts. Tab-spit file: first column is the number of deleted nucleotides in comparison with reference gene annotation; second column is its frequency. Total frequency must be <= 1.0. Can choose from './utilities/3_end_completeness.*.tab' under the IsoSeqSim package")
    group1.add_argument('--es',type=str,default='0.017',help="Error rate: substitution. For more choices, see README")
    group1.add_argument('--ei',type=str,default='0.011',help="Error rate: insertion. For more choices, see README")
    group1.add_argument('--ed',type=str,default='0.022',help="Error rate: deletion. For more choices, see README")

    args = parser.parse_args()
    return args

if __name__=="__main__":
    main()
